// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stateinfo.proto

package generated

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TransactionMetadata struct {
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	BlockNumber uint64       `protobuf:"varint,2,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	Timestamp   uint64       `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *TransactionMetadata) Reset()                    { *m = TransactionMetadata{} }
func (m *TransactionMetadata) String() string            { return proto.CompactTextString(m) }
func (*TransactionMetadata) ProtoMessage()               {}
func (*TransactionMetadata) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TransactionMetadata) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionMetadata) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *TransactionMetadata) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type LastTransactions struct {
	TxMetadata []*TransactionMetadata `protobuf:"bytes,1,rep,name=tx_metadata,json=txMetadata" json:"tx_metadata,omitempty"`
}

func (m *LastTransactions) Reset()                    { *m = LastTransactions{} }
func (m *LastTransactions) String() string            { return proto.CompactTextString(m) }
func (*LastTransactions) ProtoMessage()               {}
func (*LastTransactions) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *LastTransactions) GetTxMetadata() []*TransactionMetadata {
	if m != nil {
		return m.TxMetadata
	}
	return nil
}

type ForkState struct {
	InitiatorHeaderhash  []byte   `protobuf:"bytes,1,opt,name=initiator_headerhash,json=initiatorHeaderhash,proto3" json:"initiator_headerhash,omitempty"`
	ForkPointHeaderhash  []byte   `protobuf:"bytes,2,opt,name=fork_point_headerhash,json=forkPointHeaderhash,proto3" json:"fork_point_headerhash,omitempty"`
	OldMainchainHashPath [][]byte `protobuf:"bytes,3,rep,name=old_mainchain_hash_path,json=oldMainchainHashPath,proto3" json:"old_mainchain_hash_path,omitempty"`
	// if the fork recovery fails
	NewMainchainHashPath [][]byte `protobuf:"bytes,4,rep,name=new_mainchain_hash_path,json=newMainchainHashPath,proto3" json:"new_mainchain_hash_path,omitempty"`
}

func (m *ForkState) Reset()                    { *m = ForkState{} }
func (m *ForkState) String() string            { return proto.CompactTextString(m) }
func (*ForkState) ProtoMessage()               {}
func (*ForkState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ForkState) GetInitiatorHeaderhash() []byte {
	if m != nil {
		return m.InitiatorHeaderhash
	}
	return nil
}

func (m *ForkState) GetForkPointHeaderhash() []byte {
	if m != nil {
		return m.ForkPointHeaderhash
	}
	return nil
}

func (m *ForkState) GetOldMainchainHashPath() [][]byte {
	if m != nil {
		return m.OldMainchainHashPath
	}
	return nil
}

func (m *ForkState) GetNewMainchainHashPath() [][]byte {
	if m != nil {
		return m.NewMainchainHashPath
	}
	return nil
}

func init() {
	proto.RegisterType((*TransactionMetadata)(nil), "qrl.TransactionMetadata")
	proto.RegisterType((*LastTransactions)(nil), "qrl.LastTransactions")
	proto.RegisterType((*ForkState)(nil), "qrl.ForkState")
}

func init() { proto.RegisterFile("stateinfo.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xe9, 0x3a, 0x84, 0x9d, 0x0e, 0x1c, 0xd9, 0xc4, 0x22, 0x5e, 0xd4, 0x5d, 0xf5, 0x6a,
	0x60, 0xc5, 0x0b, 0x5f, 0x40, 0x76, 0xe1, 0x64, 0x54, 0xef, 0xc3, 0xd9, 0x9a, 0x91, 0xb0, 0x36,
	0xe9, 0x92, 0x23, 0xdb, 0x33, 0xf8, 0x94, 0x3e, 0x8a, 0x34, 0xb3, 0x5b, 0x51, 0xef, 0x92, 0xff,
	0x3b, 0x1f, 0xf9, 0x93, 0xc0, 0xa5, 0x23, 0x24, 0xa1, 0xf4, 0xc6, 0xcc, 0x6a, 0x6b, 0xc8, 0xb0,
	0x70, 0x67, 0xcb, 0x9b, 0xc1, 0xce, 0x96, 0xc7, 0xfd, 0xf4, 0x33, 0x80, 0xf1, 0xbb, 0x45, 0xed,
	0x70, 0x4d, 0xca, 0xe8, 0x85, 0x20, 0x2c, 0x90, 0x90, 0x65, 0x10, 0xd1, 0x39, 0x8e, 0x83, 0x24,
	0x48, 0xa3, 0x6c, 0x34, 0x6b, 0xc4, 0xce, 0x78, 0xde, 0x1d, 0x62, 0x77, 0x30, 0x5c, 0x95, 0x66,
	0xbd, 0xe5, 0xfa, 0xa3, 0x5a, 0x09, 0x1b, 0xf7, 0x92, 0x20, 0xed, 0xe7, 0x91, 0xcf, 0x5e, 0x7d,
	0xc4, 0x6e, 0x61, 0x40, 0xaa, 0x12, 0x8e, 0xb0, 0xaa, 0xe3, 0xd0, 0xf3, 0x73, 0x30, 0x5d, 0xc0,
	0xe8, 0x05, 0x1d, 0x75, 0x0e, 0x70, 0xec, 0x09, 0x22, 0x3a, 0xf0, 0xea, 0xa7, 0x57, 0x1c, 0x24,
	0x61, 0x1a, 0x65, 0xf1, 0xef, 0x22, 0x6d, 0xef, 0x1c, 0xe8, 0xd0, 0xae, 0xa7, 0x5f, 0x01, 0x0c,
	0x9e, 0x8d, 0xdd, 0xbe, 0x35, 0x6f, 0xc0, 0xee, 0x61, 0xa2, 0xb4, 0x22, 0x85, 0x64, 0x2c, 0x97,
	0x02, 0x0b, 0x61, 0x25, 0x3a, 0xe9, 0xaf, 0x36, 0xcc, 0xc7, 0x27, 0x36, 0x3f, 0x21, 0x96, 0xc1,
	0xd5, 0xc6, 0xd8, 0x2d, 0xaf, 0x8d, 0xd2, 0xd4, 0x75, 0x7a, 0x47, 0xa7, 0x81, 0xcb, 0x86, 0x75,
	0x9c, 0x47, 0xb8, 0x36, 0x65, 0xc1, 0x2b, 0x54, 0x7a, 0x2d, 0x51, 0x69, 0xde, 0xa4, 0xbc, 0x46,
	0x92, 0x71, 0x98, 0x84, 0xe9, 0x30, 0x9f, 0x98, 0xb2, 0x58, 0xb4, 0x74, 0x8e, 0x4e, 0x2e, 0x91,
	0xbc, 0xa6, 0xc5, 0xfe, 0x5f, 0xad, 0x7f, 0xd4, 0xb4, 0xd8, 0xff, 0xd1, 0x56, 0x17, 0xfe, 0x17,
	0x1f, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x97, 0x38, 0x64, 0xf3, 0xe8, 0x01, 0x00, 0x00,
}
